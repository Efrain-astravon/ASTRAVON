generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ChapterType {
  TEXT
  AUDIO
  VIDEO
  MIXED
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  courses       Course[]

  role       String    @default("user")
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model School {
  id        String   @id @default(uuid())
  name      String
  level     Level
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]

  @@map("school")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String
  level       Level
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher   User   @relation(fields: [teacherId], references: [id])
  teacherId String

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  chapters Chapter[]

  @@map("course")
}

model Chapter {
  id          String      @id @default(uuid())
  title       String
  description String?
  type        ChapterType
  content     String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  media Media[]

  @@map("chapter")
}

model Media {
  id  String @id @default(uuid())
  url String

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String

  @@map("media")
}
